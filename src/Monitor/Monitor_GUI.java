
package Monitor;

import Communication.Message;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Monitor graphical interface.
 * @author Rafael Sá (104552), Luís Laranjeira (81526)
 */
public class Monitor_GUI extends javax.swing.JFrame {

    /** Monitor Service. */
    private final Monitor monitor;
    
    /**
     * Creates new form Monitor_GUI.
     * @param port monitor server port
     * @param hostname load balancer host name
     * @param lbPort load balancer port
     * @param heartbeatThreshold heartbeat threshold
     */
    public Monitor_GUI(int port, String hostname, int lbPort, int heartbeatThreshold) {
        initComponents();
        this.monitor = new Monitor(port, hostname, lbPort, heartbeatThreshold, this);
        this.monitor.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jLayeredPaneServerRequests = new javax.swing.JLayeredPane();
        jPanelBase = new javax.swing.JPanel();
        jButtonEnd = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPaneServer = new javax.swing.JScrollPane();
        jTableServer = new javax.swing.JTable();
        jScrollPaneLB = new javax.swing.JScrollPane();
        jTableLB = new javax.swing.JTable();
        jPanelServer = new javax.swing.JPanel();
        jButtonBack = new javax.swing.JButton();
        jLabelTitleServer = new javax.swing.JLabel();
        jScrollPaneRequests = new javax.swing.JScrollPane();
        jTableRequests = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelTitle.setText("Monitor");
        jLabelTitle.setMaximumSize(new java.awt.Dimension(70, 22));

        jButtonEnd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonEnd.setText("End");
        jButtonEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEndActionPerformed(evt);
            }
        });

        jTableServer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server ID", "State", "Nº of Requests", "Requests"
            }
        ));
        jTableServer.setColumnSelectionAllowed(true);
        jTableServer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableServerMouseClicked(evt);
            }
        });
        jScrollPaneServer.setViewportView(jTableServer);
        jTableServer.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableServer.getColumnModel().getColumnCount() > 0) {
            jTableServer.getColumnModel().getColumn(3).setCellRenderer(new TableButtonRenderer());
        }
        jTableServer.setName("Server");
        jTableServer.setRowHeight(35);
        jTableServer.addMouseListener(new JTableButtonMouseListener(jTableServer));

        jTabbedPane.addTab("Server", jScrollPaneServer);

        jTableLB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Client", "Server", "Nº of Iterations", "Current Iteration"
            }
        ));
        jScrollPaneLB.setViewportView(jTableLB);

        jTabbedPane.addTab("Load Balancer", jScrollPaneLB);

        javax.swing.GroupLayout jPanelBaseLayout = new javax.swing.GroupLayout(jPanelBase);
        jPanelBase.setLayout(jPanelBaseLayout);
        jPanelBaseLayout.setHorizontalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBaseLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonEnd)))
                .addContainerGap())
        );
        jPanelBaseLayout.setVerticalGroup(
            jPanelBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonEnd)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );

        jPanelServer.setEnabled(false);

        jButtonBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabelTitleServer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelTitleServer.setText("Server Requests");
        jLabelTitleServer.setMaximumSize(new java.awt.Dimension(150, 17));
        jLabelTitleServer.setPreferredSize(new java.awt.Dimension(150, 17));

        jTableRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Client", "Nº of Iterations", "Current Iteration"
            }
        ));
        jScrollPaneRequests.setViewportView(jTableRequests);

        javax.swing.GroupLayout jPanelServerLayout = new javax.swing.GroupLayout(jPanelServer);
        jPanelServer.setLayout(jPanelServerLayout);
        jPanelServerLayout.setHorizontalGroup(
            jPanelServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelServerLayout.createSequentialGroup()
                        .addComponent(jButtonBack)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPaneRequests, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelServerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitleServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(192, 192, 192))
        );
        jPanelServerLayout.setVerticalGroup(
            jPanelServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelServerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBack)
                .addGap(4, 4, 4)
                .addComponent(jLabelTitleServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPaneRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLayeredPaneServerRequests.setLayer(jPanelBase, javax.swing.JLayeredPane.PALETTE_LAYER);
        jLayeredPaneServerRequests.setLayer(jPanelServer, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPaneServerRequestsLayout = new javax.swing.GroupLayout(jLayeredPaneServerRequests);
        jLayeredPaneServerRequests.setLayout(jLayeredPaneServerRequestsLayout);
        jLayeredPaneServerRequestsLayout.setHorizontalGroup(
            jLayeredPaneServerRequestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelBase, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPaneServerRequestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPaneServerRequestsLayout.setVerticalGroup(
            jLayeredPaneServerRequestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPaneServerRequestsLayout.createSequentialGroup()
                .addGap(0, 62, Short.MAX_VALUE)
                .addComponent(jPanelBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jLayeredPaneServerRequestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPaneServerRequestsLayout.createSequentialGroup()
                    .addGap(0, 66, Short.MAX_VALUE)
                    .addComponent(jPanelServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(270, Short.MAX_VALUE)
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPaneServerRequests, javax.swing.GroupLayout.Alignment.TRAILING))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(267, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLayeredPaneServerRequests, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * End button action.
     * @param evt event
     */
    private void jButtonEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEndActionPerformed
        monitor.closeSockets();
        System.exit(0);
    }//GEN-LAST:event_jButtonEndActionPerformed

    /**
     * Back button event.
     * @param evt event
     */
    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        jLayeredPaneServerRequests.setLayer(jPanelBase, 2);
        jLayeredPaneServerRequests.setLayer(jPanelServer, 0);
        jLayeredPaneServerRequests.repaint();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jTableServerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableServerMouseClicked

    }//GEN-LAST:event_jTableServerMouseClicked
    
    /**
     * View server requests button action.
     * @param object server id
     */
    private void jButtonServerInfoActionPerformed(Integer object) {    
        jLabelTitleServer.setText("Server " + object + " Requests");
        loadServerRequests(object);
        jLayeredPaneServerRequests.setLayer(jPanelServer, 2);
        jLayeredPaneServerRequests.setLayer(jPanelBase, 0);
        jLayeredPaneServerRequests.repaint();
    } 
    
    /**
    * Custom List Item Renderer.
    */
    class TableButtonRenderer extends DefaultTableCellRenderer {
        private static final long serialVersionUID = -7799441088157759804L;
        private JButton button;

        TableButtonRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, 
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int col) {
            
            button = new JButton();
            button.setText("View Server Requests");        
            return button;
        }
        
    }
    
    public class JTableButtonMouseListener extends MouseAdapter {
      private final JTable table;

      public JTableButtonMouseListener(JTable table) {
        this.table = table;
      }

      @Override public void mouseClicked(MouseEvent e) {
        int column = table.getColumnModel().getColumnIndexAtX(e.getX());
        int row = e.getY()/table.getRowHeight(); 
        if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0) {
            if(((String)table.getValueAt(row, 1)).equals("UP")){
                String value = (String)table.getValueAt(row, 0);
                String[] values = value.split("\\s+");
                jButtonServerInfoActionPerformed(Integer.parseInt(values[1]));
            }
        }
      }
    }
    
    /**
     * Load requests being handled by a server to the table.
     * @param id server id
     */
    private synchronized void loadServerRequests(Integer id){
        DefaultTableModel model;
        model = (DefaultTableModel) jTableRequests.getModel();
        cleanTable(model);
        Map<Integer, String> currentStates = monitor.getCurrentStates(id);
        boolean exists;
        for (Message request : monitor.getRequests(id)) {
            exists = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (((String)model.getValueAt(i, 0)).equals("Request " + request.getRequestId())) {
                    exists = true;
                }
            }
            if(!exists)
                model.addRow(new Object[]{"Request " + request.getRequestId(), "Client " + request.getClientId(), request.getIterations(), currentStates.get(request.getRequestId())});
        }
    }
    
    /**
     * Clean server requests table.
     * @param model table model
     */
    private synchronized void cleanTable(DefaultTableModel model){
        for(int i = model.getRowCount() - 1; i >= 0; i--){
            model.removeRow(i);
        }
    }
    
    /**
     * Remove request from requests table.
     * @param requestId request id
     */
    public synchronized void removeRequestFromRequestTable(int requestId){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                removeRequestFromRequestTable(requestId);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableRequests.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                model.removeRow(i);
            }
        }
    }
    
    /**
     * Add a new server to the table.
     * @param serverId server id
     */
    public synchronized void addServerToTable(int serverId){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                addServerToTable(serverId);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableServer.getModel();
        model.addRow(new Object[]{"Server " + serverId, "UP", 0});
    }
    
    /**
     * Set server down on GUI.
     * @param serverId server id
     */
    public synchronized void setServerDown(int serverId){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setServerDown(serverId);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableServer.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Server " + serverId)) {
                model.setValueAt("DOWN", i, 1);
            }
        }
    }
    
    /**
     * Set the number of requests that a server is handling.
     * @param serverId server id
     * @param numRequests number of requests
     */
    public synchronized void setNumRequestsServer(int serverId, int numRequests){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setNumRequestsServer(serverId, numRequests);
            });
            return;
        } 
        DefaultTableModel model;
        model = (DefaultTableModel) jTableServer.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Server " + serverId)) {
                model.setValueAt(numRequests, i, 2);
            }
        }
    }
    
    /**
     * Add a new request to the load balancer table.
     * @param request new request
     */
    public synchronized void addRequestToLBTable(Message request){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                addRequestToLBTable(request);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableLB.getModel();
        model.addRow(new Object[]{"Request " + request.getRequestId(), "Client " + request.getClientId(), "Not Assigned", request.getIterations(), "Pending"});
    }
    
    /**
     * Remove a request from a load balancer table.
     * @param requestId id of the request to remove
     */
    public synchronized void removeRequestFromLBTable(int requestId){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                removeRequestFromLBTable(requestId);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableLB.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                model.removeRow(i);
            }
        }
    }
    
    /**
     * Set the server assigned to a given request on the GUI.
     * @param requestId request id
     * @param serverId server id
     */
    public synchronized void setRequestServer(int requestId, int serverId){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setRequestServer(requestId, serverId);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableLB.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                model.setValueAt("Server " + serverId, i, 2);
                model.setValueAt("In Queue", i, 4);
            }
        }
    }
    
    /**
     * Set the current iteration on a request being processed on the load balancer table.
     * @param requestId request id
     * @param iteration current iteration of a request
     */
    public synchronized void setCurrentIterationsRequestLBTable(int requestId, int iteration){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setCurrentIterationsRequestLBTable(requestId, iteration);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableLB.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                model.setValueAt(iteration, i, 4);
            }
        }
    }
    
    /**
     * Set the current iteration on a request being processed on the requests table.
     * @param requestId request id
     * @param iteration current iteration of a request
     */
    public synchronized void setCurrentIterationsRequestTable(int requestId, int iteration){
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setCurrentIterationsRequestTable(requestId, iteration);
            });
            return;
        }
        DefaultTableModel model;
        model = (DefaultTableModel) jTableRequests.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                model.setValueAt(iteration, i, 3);
            }
        }
    }
    
    /**
     * Add a new to the request table, if the server requests is being shown.
     * @param requestId request id
     * @param clientId client id
     * @param iterations number of iterations
     * @param current current state of the request
     * @param serverId server id
     */
    public synchronized void addRequestToTableRequest(int requestId, int clientId, int iterations, String current, int serverId){
         if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                addRequestToTableRequest(requestId, clientId, iterations, current, serverId);
            });
            return;
        }
        if(jLabelTitleServer.getText().equals("Server " + serverId + " Requests")){
            DefaultTableModel model;
            model = (DefaultTableModel) jTableRequests.getModel();
            boolean exists = false;
            for (int i = 0; i < model.getRowCount(); i++) {
                if (((String)model.getValueAt(i, 0)).equals("Request " + requestId)) {
                    exists = true;
                }
            }
            if(!exists)
                model.addRow(new Object[]{"Request " + requestId, "Client " + clientId, iterations, current});
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonEnd;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelTitleServer;
    private javax.swing.JLayeredPane jLayeredPaneServerRequests;
    private javax.swing.JPanel jPanelBase;
    private javax.swing.JPanel jPanelServer;
    private javax.swing.JScrollPane jScrollPaneLB;
    private javax.swing.JScrollPane jScrollPaneRequests;
    private javax.swing.JScrollPane jScrollPaneServer;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableLB;
    private javax.swing.JTable jTableRequests;
    private javax.swing.JTable jTableServer;
    // End of variables declaration//GEN-END:variables
}
