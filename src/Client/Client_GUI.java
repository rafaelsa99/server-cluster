
package Client;

import Communication.CClient;
import Communication.Message;
import Communication.MessageCodes;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * Client graphical interface.
 * @author Rafael Sá (104552), Luís Laranjeira (81526)
 */
public class Client_GUI extends javax.swing.JFrame {

    /** Client to receive the reply messages. */
    private Client client;
    /** Communication client. */
    private CClient cclient;
    /** List of the requests. */
    private final List<Request> requests;
    /** Request counter. */
    private static int REQUEST_COUNTER;
    
    /**
     * Creates new form GUI_Client.
     * @param clientID client id
     * @param hostname load balancer host name
     * @param lbPort load balancer port
     */
    public Client_GUI(int clientID, String hostname, int lbPort) {
        initComponents();
        this.cclient = new CClient(hostname, lbPort);
        this.cclient.connectToServer();
        REQUEST_COUNTER = 1000 * clientID;
        this.requests = new ArrayList<>();
        //this.client = client;
    }
       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jButtonEnd = new javax.swing.JButton();
        jSpinnerInteractionsCount = new javax.swing.JSpinner();
        jLabelIterations = new javax.swing.JLabel();
        jButtonRequest = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPaneExecuted = new javax.swing.JScrollPane();
        jTableExecutedRequests = new javax.swing.JTable();
        jScrollPanePending = new javax.swing.JScrollPane();
        jTablePendingRequests = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabelTitle.setText("Client");
        jLabelTitle.setMaximumSize(new java.awt.Dimension(70, 22));

        jButtonEnd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonEnd.setText("End");
        jButtonEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEndActionPerformed(evt);
            }
        });

        jSpinnerInteractionsCount.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerInteractionsCount.setMinimumSize(new java.awt.Dimension(50, 24));
        jSpinnerInteractionsCount.setPreferredSize(new java.awt.Dimension(50, 24));

        jLabelIterations.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabelIterations.setText("Nº of Iterations:");

        jButtonRequest.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonRequest.setText("New Request");
        jButtonRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRequestActionPerformed(evt);
            }
        });

        jTableExecutedRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Nº of Iterations", "Reply"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneExecuted.setViewportView(jTableExecutedRequests);

        jTabbedPane.addTab("Executed Requests", jScrollPaneExecuted);

        jTablePendingRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request", "Nº of Iterations"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPanePending.setViewportView(jTablePendingRequests);

        jTabbedPane.addTab("Pending Requests", jScrollPanePending);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabelIterations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSpinnerInteractionsCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonRequest)
                                .addGap(0, 44, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonEnd)
                                .addGap(8, 8, 8))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonEnd)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerInteractionsCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIterations)
                    .addComponent(jButtonRequest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEndActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonEndActionPerformed

    private void jButtonRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRequestActionPerformed
        System.out.println(jSpinnerInteractionsCount.getValue());
        try {
            initConnection(client.getLbHost(), client.getLbPort());
            newRequest(Integer.valueOf(jSpinnerInteractionsCount.getValue().toString()));
            Request auxRequest = requests.get(requests.size()-1);
            Message msg = new Message(true, client.getId(), auxRequest.getId(), MessageCodes.REQUEST, auxRequest.getnIterations());
            cclient.sendMessageAndWaitForReply(msg);
        } catch (Exception ex) {
            Logger.getLogger(Client_GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonRequestActionPerformed

    private void initConnection(String hostname, int port) throws Exception{
        cclient = new CClient(hostname, port);
        cclient.connectToServer();
    }
    
    private void newRequest(int nIterations){
        requests.add(new Request(requests.size(),nIterations));
    }

    private void addPendingRequest(Request request){
        DefaultTableModel model;
        model = (DefaultTableModel) jTablePendingRequests.getModel();
        model.addRow(new Object[]{"Request " + request.getId(), request.getnIterations()});
        assPendingRequest.put(request.getId(), model.getRowCount() - 1);
    }
    
    private void newExecutedRequest(Request request){
        DefaultTableModel model;
        model = (DefaultTableModel) jTablePendingRequests.getModel();
        model.removeRow(assPendingRequest.get(request.getId()));
        assPendingRequest.remove(request.getId());
        model = (DefaultTableModel) jTableExecutedRequests.getModel();
        model.addRow(new Object[]{"Request " + request.getId(), request.getnIterations(),request.getReply()});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEnd;
    private javax.swing.JButton jButtonRequest;
    private javax.swing.JLabel jLabelIterations;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JScrollPane jScrollPaneExecuted;
    private javax.swing.JScrollPane jScrollPanePending;
    private javax.swing.JSpinner jSpinnerInteractionsCount;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableExecutedRequests;
    private javax.swing.JTable jTablePendingRequests;
    // End of variables declaration//GEN-END:variables
}
