
package ControlPanel;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.concurrent.locks.ReentrantLock;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rafael Sá (104552), Luís Laranjeira (81526)
 */
public class ControlPanel_GUI extends javax.swing.JFrame {

    private final ReentrantLock rl;
    private final Control control;
    
    /**
     * Creates new form ControlPanel_GUI
     */
    public ControlPanel_GUI() {
        initComponents();
        control = new Control();
        rl = new ReentrantLock();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonEnd = new javax.swing.JButton();
        jToggleButtonStartLoadBalancer = new javax.swing.JToggleButton();
        jToggleButtonStartMonitor = new javax.swing.JToggleButton();
        jButtonNewServer = new javax.swing.JButton();
        jButtonNewClient = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPaneServers = new javax.swing.JScrollPane();
        jTableServers = new javax.swing.JTable();
        jScrollPaneClients = new javax.swing.JScrollPane();
        jTableClients = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonEnd.setText("End");
        jButtonEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEndActionPerformed(evt);
            }
        });

        jToggleButtonStartLoadBalancer.setText("Start Load Balancer");
        jToggleButtonStartLoadBalancer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStartLoadBalancerActionPerformed(evt);
            }
        });

        jToggleButtonStartMonitor.setText("Start Monitor");
        jToggleButtonStartMonitor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStartMonitorActionPerformed(evt);
            }
        });

        jButtonNewServer.setText("Start New Server");
        jButtonNewServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewServerActionPerformed(evt);
            }
        });

        jButtonNewClient.setText("Start New Client");
        jButtonNewClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewClientActionPerformed(evt);
            }
        });

        jTableServers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server ID", "Shutdown"
            }
        ));
        jTableServers.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableServers.setEnabled(false);
        jTableServers.setName("Servers");
        jTableServers.setRowHeight(35);
        jTableServers.addMouseListener(new JTableButtonMouseListener(jTableServers));
        jScrollPaneServers.setViewportView(jTableServers);
        if (jTableServers.getColumnModel().getColumnCount() > 0) {
            jTableServers.getColumnModel().getColumn(1).setCellRenderer(new TableButtonRenderer());
        }

        jTabbedPane.addTab("Servers", jScrollPaneServers);

        jTableClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client ID", "Shutdown"
            }
        ));
        jTableClients.setEnabled(false);
        jTableClients.setFocusable(false);
        jTableClients.setName("Clients");
        jTableClients.setRowHeight(35);
        jTableClients.addMouseListener(new JTableButtonMouseListener(jTableClients));
        jScrollPaneClients.setViewportView(jTableClients);
        if (jTableClients.getColumnModel().getColumnCount() > 0) {
            jTableClients.getColumnModel().getColumn(1).setCellRenderer(new TableButtonRenderer());
        }

        jTabbedPane.addTab("Clients", jScrollPaneClients);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("Control Panel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(173, 173, 173)
                        .addComponent(jButtonEnd))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButtonStartLoadBalancer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButtonStartMonitor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNewServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNewClient)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEnd)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButtonStartLoadBalancer)
                    .addComponent(jToggleButtonStartMonitor)
                    .addComponent(jButtonNewServer)
                    .addComponent(jButtonNewClient))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonStartLoadBalancerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStartLoadBalancerActionPerformed
        rl.lock();
        try{
            if(jToggleButtonStartLoadBalancer.isSelected()){
                jToggleButtonStartLoadBalancer.setText("End Load Balancer");
                control.startLoadBalancer();
            } else {
                jToggleButtonStartLoadBalancer.setText("Start Load Balancer");
                control.endLoadBalancer();
            }
        } finally {
            rl.unlock();
        }
    }//GEN-LAST:event_jToggleButtonStartLoadBalancerActionPerformed

    private void jToggleButtonStartMonitorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStartMonitorActionPerformed
        rl.lock();
        try{
            if(jToggleButtonStartMonitor.isSelected()){
                jToggleButtonStartMonitor.setText("End Monitor");
                control.startMonitor();
            } else {
                jToggleButtonStartMonitor.setText("Start Monitor");
                control.endMonitor();
            }
        } finally {
            rl.unlock();
        }
    }//GEN-LAST:event_jToggleButtonStartMonitorActionPerformed

    private void jButtonNewServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewServerActionPerformed
        rl.lock();
        try{
            int serverId = control.startServer();
            addElemToServerTable(serverId);
        } finally {
            rl.unlock();
        }
        
    }//GEN-LAST:event_jButtonNewServerActionPerformed

    private void jButtonNewClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewClientActionPerformed
        rl.lock();
        try{
            int clientId = control.startClient();
            addElemToClientTable(clientId);
        } finally {
            rl.unlock();
        }
    }//GEN-LAST:event_jButtonNewClientActionPerformed

    private void jButtonEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEndActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonEndActionPerformed
    
    
    private void addElemToServerTable(Integer serverId){
        DefaultTableModel model;
        model = (DefaultTableModel) jTableServers.getModel();
        model.addRow(new Object[]{"Server " + serverId, serverId});
    }
    
    private void removeElemFromServerTable(Integer serverId){
        DefaultTableModel model;
        model = (DefaultTableModel) jTableServers.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Server " + serverId)) {
                model.removeRow(i);
            }
        }
    }
    
        private void addElemToClientTable(Integer clientId){
        DefaultTableModel model;
        model = (DefaultTableModel) jTableClients.getModel();
        model.addRow(new Object[]{"Client " + clientId, clientId});
    }
    
    private void removeElemFromClientTable(Integer clientId){
        DefaultTableModel model;
        model = (DefaultTableModel) jTableClients.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if (((String)model.getValueAt(i, 0)).equals("Client " + clientId)) {
                model.removeRow(i);
            }
        }
    }
        
    private void jButtonShutdownServerActionPerformed(Integer object) {                                           
        control.shutdownServer(object);
        removeElemFromServerTable(object);
    }
    
    private void jButtonShutdownClientActionPerformed(Integer object) {                                           
        control.shutdownClient(object);
        removeElemFromClientTable(object);
    } 
        /**
    * Custom List Item Renderer
    */
    class TableButtonRenderer extends DefaultTableCellRenderer {
        private static final long serialVersionUID = -7799441088157759804L;
        private JButton button;

        TableButtonRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(
                JTable table, 
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int col) {
            
            button = new JButton();
            button.setText("Shutdown");        
            return button;
        }
        
    }
    
    public class JTableButtonMouseListener extends MouseAdapter {
      private final JTable table;

      public JTableButtonMouseListener(JTable table) {
        this.table = table;
      }

      @Override public void mouseClicked(MouseEvent e) {
        int column = table.getColumnModel().getColumnIndexAtX(e.getX());
        int row = e.getY()/table.getRowHeight(); 

        if (row < table.getRowCount() && row >= 0 && column < table.getColumnCount() && column >= 0) {
          Object value = table.getValueAt(row, column);
            if(table.getName().equals("Servers"))
            {
                jButtonShutdownServerActionPerformed((Integer)value);
            }else{
                jButtonShutdownClientActionPerformed((Integer)value);
            }
        }
      }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPanel_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPanel_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPanel_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPanel_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ControlPanel_GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEnd;
    private javax.swing.JButton jButtonNewClient;
    private javax.swing.JButton jButtonNewServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPaneClients;
    private javax.swing.JScrollPane jScrollPaneServers;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTableClients;
    private javax.swing.JTable jTableServers;
    private javax.swing.JToggleButton jToggleButtonStartLoadBalancer;
    private javax.swing.JToggleButton jToggleButtonStartMonitor;
    // End of variables declaration//GEN-END:variables
}
